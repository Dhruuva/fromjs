{"name":"from.js","tagline":"The fastest LINQ engine for JavaScript","body":"# from.js\r\nfrom.js is a super fast, extremely-optimized LINQ engine for JavaScript.\r\n\r\n## Features\r\n* **High-performance** ([See the benchmark result](https://github.com/suckgamoni/fromjs/blob/work/web/benchmark/result.png))\r\n* Supports most LINQ functions that .NET provides\r\n* 100% lazy evaluation\r\n* Supports lambda expression\r\n\r\n## Supported platforms\r\n* Web\r\n* node.js\r\n\r\n## This is intended to\r\n\r\n* make it easy to use LINQ in JavaScript for whom is familiar with .NET environment.\r\n* provide LINQ features to JavaScript developers without worrying about performance.\r\n\r\n## Importing module\r\n\r\n**Web**\r\n\r\n```html\r\n<script src='from.js'></script>\r\n```\r\n\r\n**node.js** (It can be installed by using _npm install fromjs_)\r\n\r\n```javascript\r\nvar from = require('fromjs');\r\n```\r\n## Basic iteration\r\n\r\nYou can basically iterate Array, String, Object by using each(). \r\n\r\n```javascript\r\nvar array = [1, 2, 3, 4];\r\nfrom(array).each(function (value, key) {\r\n    console.log('Value ' + value + ' at index ' + key);\r\n});\r\n\r\n// Value 1 at index 0\r\n// Value 2 at index 1\r\n// Value 3 at index 2\r\n// Value 4 at index 3\r\n```\r\n\r\n```javascript\r\nvar o = {foo: 1, bar: 2};\r\nfrom(o).each(function (value, key) {\r\n    console.log(key + ' = ' + value);\r\n});\r\n\r\n// foo = 1\r\n// bar = 2\r\n```\r\n\r\nAn iteration can be stopped by returning false.\r\n\r\n```javascript\r\nvar array = [1, 2, 3, 4];\r\nfrom(array).each(function (value, key) {\r\n    console.log('Value ' + value + ' at index ' + key);\r\n    return value != 2;\r\n});\r\n\r\n// Value 1 at index 0\r\n// Value 2 at index 1\r\n```\r\n\r\n_broken_ parameter can be used to investigate either the iteration was broken.\r\n\r\n```javascript\r\nvar array = [1, 2, 3, 4];\r\nvar broken = from(array).each(function (value, key) {\r\n    return value != 2;\r\n}).broken;\r\n\r\nconsole.log(broken); // true\r\n```\r\n\r\n## Basic query\r\n\r\n**Printing numbers less than 5 in an array**\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\n\r\nfrom(numbers)\r\n    .where(function (value) {\r\n        return value < 5;\r\n    })\r\n    .each(function (value) {\r\n        console.log(value);\r\n    });\r\n```\r\n\r\n**Printing each number + 1 in an array**\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\n      \r\nfrom(numbers)\r\n    .select(function (value) {\r\n        return value + 1;\r\n    })\r\n    .each(function (value) {\r\n        console.log(value);\r\n    });\r\n```\r\n\r\n**Printing the average of top 3 grades**\r\n```javascript\r\nvar grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n      \r\nvar average = from(grades)\r\n                .orderByDesc()\r\n                .take(3)\r\n                .average();\r\n                \r\nconsole.log(average);\r\n```\r\n\r\n## Lambda expression\r\n\r\nIt will be so tiring work to write every nested function every time. It can be evaded by using lambda expression.\r\nIts format is almost same as C#'s.\r\n\r\nHere's an example.\r\n\r\n```javascript\r\nfunction (arg1, arg2, arg3) {\r\n    return arg1 * arg2 + arg3;\r\n}\r\n```\r\n\r\nThe function given above can be re-written as below using lambda expression.\r\n\r\n```\r\n(arg1, arg2, arg3) => arg1 * arg2 + arg3\r\n```\r\n\r\nParentheses can be omitted when it has only one argument.\r\n\r\n```\r\narg1 => arg1 * 3\r\n```\r\n\r\nNow let's apply it into real JavaScript code.\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\n\r\nfrom(numbers)\r\n    .where(function (value) {\r\n        return value < 5;\r\n    })\r\n    .each(function (value) {\r\n        console.log(value);\r\n    });\r\n```\r\n\r\nThe example above can be re-written as below.\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\n\r\nfrom(numbers)\r\n    .where('value => value < 5')\r\n    .each('value => console.log(value)');\r\n```\r\n\r\n## Omitting argument list\r\n\r\nLambda expression can be shorten more by omitting argument list.\r\nBut how can it be used without any argument specified?\r\nfrom.js provides several abbreviations which can be used in this case.\r\n\r\n| Abbreviation | Meaning                          |\r\n| ------------ | -------------------------------- |\r\n| #n           | The _n_-th argument (zero based) |\r\n| $            | The first argument (same as #0)  |\r\n| $$           | The second argument (same as #1) |\r\n| @            | The last argument                |\r\n\r\nFor example,\r\n\r\n```\r\n(arg0, arg1, arg2, arg3) => arg0 * arg1 + arg2 * arg3\r\n```\r\n\r\nthe expression above can be shorten as below.\r\n\r\n```\r\n#0 * #1 + #2 * #3\r\n```\r\n\r\nor\r\n\r\n```\r\n$ * $$ + #2 * @\r\n```\r\n\r\nLet's apply it into JavaScript code.\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\n\r\nfrom(numbers)\r\n    .where(function (value) {\r\n        return value < 5;\r\n    })\r\n    .each(function (value) {\r\n        console.log(value);\r\n    });\r\n```\r\n\r\nThe sample above can be shorten as below.\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\nfrom(numbers).where('$ < 5').each('console.log($)');\r\n```\r\n\r\nAs you will see, most predicator functions have similar arguments list (except comparers).\r\nIn most cases, the first argument means 'value', the second means 'key', and the last means 'external argument'.\r\n(This is the most different part from .NET)\r\nYou can habitually consider $ as a value, $$ as a key, and @ as an external argument.\r\n\r\n## External argument\r\n\r\nBecause lambda expressions are given as String, any variables in the current context can't be referenced. For example,\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\nvar n = 5;\r\nfrom(numbers).where('value => value < n').each('value => console.log(value)');\r\n```\r\n\r\nthis code won't work. Then how can it be get around?\r\nMost predicator functions provided by from.js support external argument.\r\nIf an object is given as an external argument, it can be referenced in lambda expression.\r\n\r\nThe example above should be like this:\r\n\r\n```javascript\r\nvar numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ]; \r\nvar n = 5;\r\nfrom(numbers).where('(value, key, arg) => value < arg', n).each('value => console.log(value)');\r\n// or simply\r\nfrom(numbers).where('$ < @', n).each('console.log($)');\r\n```\r\n\r\n## Some more conveniences on lambda expression\r\n\r\nThere are still more chances to shorten lambda expressions.\r\n\r\n* 'Dot' can be omitted between $,$$,@ and following keyword. For instance, _$length_ will be processed identically as _$.length_.\r\n\r\n```javascript\r\n// Print fruit names ordered by its length\r\nvar fruits = [ \"apple\", \"passionfruit\", \"banana\", \"mango\",\r\n    \"orange\", \"blueberry\", \"grape\", \"strawberry\" ];\r\nfrom(fruits).orderBy('$length').each('console.log($)');\r\n```\r\n\r\n* Referencing array of $,$$,@ can be shorten like this: @[3] --> @3\r\n\r\n```javascript\r\nvar fruits = [ \"apple\", \"passionfruit\", \"banana\", \"mango\",\r\n    \"orange\", \"blueberry\", \"grape\", \"strawberry\" ];\r\nvar appleOrBanana = from(fruits).count('$ == @0 || $ == @1', ['apple', 'banana']);\r\nconsole.log(appleOrBanana); // 2\r\n```\r\n\r\n## Empty iterable\r\n\r\n Sometimes it is needed to use an empty iterable object. In this case, simply call from() without any argument,\r\n\r\n```javascript\r\nvar names1 = [ \"Hartono, Tommy\" ];\r\nvar names2 = [ \"Adams, Terry\", \"Andersen, Henriette Thaulow\", \"Hedlund, Magnus\", \"Ito, Shu\" ];\r\nvar names3 = [ \"Solanki, Ajay\", \"Hoeing, Helge\", \"Andersen, Henriette Thaulow\", \"Potra, Cristina\", \"Iallo, Lucio\" ];\r\n\r\nvar namesList = [ names1, names2, names3 ];\r\n\r\n// Only include arrays that have four or more elements\r\nfrom(namesList)\r\n    .aggregate(from(), \"(current, next) => next.length > 3 ? current.union(next) : current\")\r\n    .each(\"console.log($)\");\r\n    \r\n/*\r\n This code produces the following output:\r\n\r\n Adams, Terry\r\n Andersen, Henriette Thaulow\r\n Hedlund, Magnus\r\n Ito, Shu\r\n Solanki, Ajay\r\n Hoeing, Helge\r\n Potra, Cristina\r\n Iallo, Lucio\r\n*/\r\n```\r\n\r\n## Ranged iterable\r\n\r\n It is able to generate a ranged iterable by using from.range().\r\n \r\n```javascript\r\nfrom.range(n)                // from 0 to n - 1\r\nfrom.range(start, end)       // from start to end - 1\r\nfrom.range(start, end, step) // from start to end - 1, increasing by step\r\n```\r\n\r\n```javascript\r\nfrom.range(4)\r\n    .select(\"$ * $\")\r\n    .each(\"console.log($)\");\r\n\r\n/*\r\n This code produces the following output:\r\n 0\r\n 1\r\n 4\r\n 9\r\n*/\r\n```\r\n\r\n```javascript\r\n// Generate a sequence of three integers starting at 4, \r\n// and then select their squares.\r\nfrom.range(4, 7)\r\n    .select(\"$ * $\")\r\n    .each(\"console.log($)\");\r\n\r\n/*\r\n This code produces the following output:\r\n 16\r\n 25\r\n 36\r\n*/\r\n```\r\n\r\n```javascript\r\nfrom.range(3, 13, 3)\r\n    .select(\"$ * $\")\r\n    .each(\"console.log($)\");\r\n\r\n/*\r\n This code produces the following output:\r\n 9\r\n 36\r\n 81\r\n 144\r\n*/\r\n```\r\n\r\n## Repeator\r\n\r\n```javascript\r\nconsole.log(from.repeat('a', 4).toString());\r\n\r\n/*\r\n This code produces the following output:\r\n aaaa\r\n*/\r\n```\r\n\r\n## Regular expression iteration\r\n\r\n```javascript\r\nvar myRe = /ab*/g;\r\nvar str = \"abbcdefabh\";\r\n\r\nfrom(myRe).match(str)\r\n    .each(function (m) {\r\n        console.log('Found ' + m +\r\n            '. Next match starts at ' + (m.index + m[0].length));\r\n    });\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n  Found abb. Next match starts at 3\r\n  Found ab. Next match starts at 9\r\n*/\r\n```\r\n\r\n```javascript\r\nvar str = 'Hello world!';\r\nconsole.log(from(/Hello/g).match(str).any()); // true\r\nconsole.log(from(/Hello/g, str).any()); // true\r\n\r\nconsole.log(from(/W3Schools/g, str).any()); // false\r\n```\r\n\r\n## Supported queries\r\n\r\n* [aggregate](https://github.com/suckgamoni/fromjs/wiki/aggregate(seed, func[, arg]%29)\r\n* [all](https://github.com/suckgamoni/fromjs/wiki/all(predicate[, arg]%29)\r\n* [any](https://github.com/suckgamoni/fromjs/wiki/any([predicate, arg]%29)\r\n* [at](https://github.com/suckgamoni/fromjs/wiki/at(index%29)\r\n* [atOrDefault](https://github.com/suckgamoni/fromjs/wiki/atOrDefault(index, defValue%29)\r\n* [average](https://github.com/suckgamoni/fromjs/wiki/average(%29)\r\n* [concat](https://github.com/suckgamoni/fromjs/wiki/concat(second%29)\r\n* [contains](https://github.com/suckgamoni/fromjs/wiki/contains(value[, comparer, arg]%29)\r\n* [count](https://github.com/suckgamoni/fromjs/wiki/count([predicate, arg]%29)\r\n* [defaultIfEmpty](https://github.com/suckgamoni/fromjs/wiki/defaultIfEmpty(defValue%29)\r\n* [distinct](https://github.com/suckgamoni/fromjs/wiki/distinct([comparer, arg]%29)\r\n* [except](https://github.com/suckgamoni/fromjs/wiki/except(second[, comparer, arg]%29)\r\n* [first](https://github.com/suckgamoni/fromjs/wiki/first([predicate, arg]%29)\r\n* [firstOrDefault](https://github.com/suckgamoni/fromjs/wiki/firstOrDefault(defValue%29 , firstOrDefault(predicate, defValue[, arg]%29)\r\n* [groupBy](https://github.com/suckgamoni/fromjs/wiki/groupBy(selectors[, comparer, arg]%29)\r\n* [groupJoin](https://github.com/suckgamoni/fromjs/wiki/groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector[, comparer, arg]%29)\r\n* [intersect](https://github.com/suckgamoni/fromjs/wiki/intersect(second[, comparer, arg]%29)\r\n* [join](https://github.com/suckgamoni/fromjs/wiki/join(inner, outerKeySelector, innerKeySelector, resultSelector[, comparer, arg]%29)\r\n* [last](https://github.com/suckgamoni/fromjs/wiki/last([predicate, arg]%29)\r\n* [lastOrDefault](https://github.com/suckgamoni/fromjs/wiki/lastOrDefault(defValue%29 , lastOrDefault(predicate, defValue[, arg]%29)\r\n* [max](https://github.com/suckgamoni/fromjs/wiki/max([selector, arg]%29)\r\n* [min](https://github.com/suckgamoni/fromjs/wiki/min([selector, arg]%29)\r\n* [orderBy](https://github.com/suckgamoni/fromjs/wiki/orderBy(keySelector[, comparer, arg]%29)\r\n* [orderByDesc](https://github.com/suckgamoni/fromjs/wiki/orderByDesc(keySelector[, comparer, arg]%29)\r\n* [reverse](https://github.com/suckgamoni/fromjs/wiki/reverse(%29)\r\n* [select](https://github.com/suckgamoni/fromjs/wiki/select(selector[, arg]%29)\r\n* [selectMany](https://github.com/suckgamoni/fromjs/wiki/selectMany(selector[, arg]%29)\r\n* [selectPair](https://github.com/suckgamoni/fromjs/wiki/selectPair(valueSelector, keySelector[, arg]%29)\r\n* [sequenceEqual](https://github.com/suckgamoni/fromjs/wiki/sequenceEqual(second[, comparer, arg]%29)\r\n* [single](https://github.com/suckgamoni/fromjs/wiki/single([predicate, arg]%29)\r\n* [singleOrDefault](https://github.com/suckgamoni/fromjs/wiki/singleOrDefault(defValue%29 , singleOrDefault(predicate, defValue[, arg]%29)\r\n* [skip](https://github.com/suckgamoni/fromjs/wiki/skip(count%29)\r\n* [skipWhile](https://github.com/suckgamoni/fromjs/wiki/skipWhile(predicate[, arg]%29)\r\n* [sum](https://github.com/suckgamoni/fromjs/wiki/sum(%29)\r\n* [take](https://github.com/suckgamoni/fromjs/wiki/take(count%29)\r\n* [takeWhile](https://github.com/suckgamoni/fromjs/wiki/takeWhile(predicate[, arg]%29)\r\n* [thenBy](https://github.com/suckgamoni/fromjs/wiki/thenBy(keySelector[, comparer, arg]%29)\r\n* [thenByDesc](https://github.com/suckgamoni/fromjs/wiki/thenByDesc(keySelector[, comparer, arg]%29)\r\n* [toArray](https://github.com/suckgamoni/fromjs/wiki/toArray(%29)\r\n* [toJSON](https://github.com/suckgamoni/fromjs/wiki/toJSON(%29)\r\n* [toString](https://github.com/suckgamoni/fromjs/wiki/toString([separator]%29)\r\n* [toURLEncoded](https://github.com/suckgamoni/fromjs/wiki/toURLEncoded(%29)\r\n* [trim](https://github.com/suckgamoni/fromjs/wiki/trim([left, right, arg]%29)\r\n* [union](https://github.com/suckgamoni/fromjs/wiki/union(second[, comparer, arg]%29)\r\n* [where](https://github.com/suckgamoni/fromjs/wiki/where(predicate[, arg]%29)\r\n* [zip](https://github.com/suckgamoni/fromjs/wiki/zip(second, resultSelector[, arg]%29)\r\n\r\n## Some practical examples\r\n\r\n```javascript\r\n// Determine either n is a prime number.\r\nfunction isPrime(n) {\r\n    return n == 2 ||\r\n        (n % 2 == 1 &&\r\n        !from.range(3, n, 2)\r\n            .takeWhile('$ * $ <= @', n)\r\n            .any('@ % $ == 0', n));\r\n}\r\n\r\n// Get prime numbers bigger than n.\r\n// Returns [count] numbers in a array, or a single number if count is zero.\r\nfunction getPrimeBiggerThan(n, count) {\r\n    n = parseInt(n) + 1;\r\n    if (n % 2 == 0) ++n;\r\n\r\n    var query = from.range(n, Infinity, 2).where('@($)', isPrime);\r\n    if (!count) {\r\n        return query.first();\r\n    } else {\r\n        return query.take(count).toArray();\r\n    }\r\n}\r\n\r\nconsole.log(getPrimeBiggerThan(10, 5));\r\n\r\n// [ 11, 13, 17, 19, 23 ]\r\n```\r\n\r\n```javascript\r\nfunction splitTrimmed(s, delimiter) {\r\n    return from(s.split(delimiter))\r\n                .select('from($).trim().toString()')\r\n                .where('$length > 0')\r\n                .toArray();\r\n}\r\n\r\nvar s = splitTrimmed('  a |  b  |  c  |  |  d  |  |  ', '|');\r\nconsole.log(s);\r\n\r\n// [ 'a', 'b', 'c', 'd' ]\r\n```\r\n\r\n```javascript\r\nvar array = [1, 2, 3];\r\n\r\n// Make a shallow copy of a array\r\nvar copy = from(array).toArray();\r\n\r\narray.push(4);\r\nconsole.log(copy);\r\n// [ 1, 2, 3 ]\r\n```\r\n\r\n## License\r\n\r\nThis software uses MIT license.\r\n\r\n```\r\nCopyright 2012-2013 suckgamony@gmail.com\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}